.container
	h3 Immobilie
	if this.rental
		Context(target=this.rental)
			.form-horizontal
				h4 Immobilie
				Binding(name="propertyName")
					FormGroup(label="Name" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Input(type="text")
				h4 Mieter
				Binding(name="tenantName")
					FormGroup(label="Name" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Input(type="text")
				Binding(name="tenantAddress")
					FormGroup(label="Adresse" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Input(type="textarea")
				Binding(name="tenantPhone")
					FormGroup(label="Telefon" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Input(type="text")
				Binding(name="tenantEmail")
					FormGroup(label="E-Mail" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Input(type="text")
				h4 Miete
				Binding(name="start" onChange=this.fix.bind(this))
					FormGroup(label="Mietbeginn" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Date
				Binding(name="end" onChange=this.fix.bind(this))
					FormGroup(label="Mietende" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Date
				Binding(name="amount")
					FormGroup(label="Miete" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Money
				h4 Monate
				table.table.table-striped
					thead
						tr
							th Monat
							th Bezahlt am
					tbody
						each month,i in this.rental.payments
							Context(name="payments")
								Context(name=i)
									tr(className=month.paymentDate?"":"danger")
										td= moment(month.month,"YYYY.MM").format("MMMM YYYY")
										td
											Binding(name="paymentDate" onChange=this.forceUpdate.bind(this,undefined))
												Date
				.btn-toolbar.pull-right
					if this.rental._id
						.btn.btn-danger(onClick=this.delete.bind(this)) LÃ¶schen
					.btn.btn-primary(onClick=this.save.bind(this)) Speichern
script(section="body").
	constructor(p,c){
		super(p,c);
		this.componentWillReceiveProps(p);
	}
	async componentWillReceiveProps(p){
		if(p.rental == "new"){
			this.rental = {			
				propertyName:"",
				
				tenantName:"",
				tenantAddress:"",
				tenantPhone:"",
				tenantEmail:"",
				
				start: null,
				end: null,
				amount: null,
				
				payments:[]
			}
			fixMonths(this.rental);
		}else{
			this.rental = await client.getRental(p.rental);
			fixMonths(this.rental);
			this.forceUpdate();
		}
	}
	
	fix(){
		fixMonths(this.rental);
		this.forceUpdate();
	}
	
	async save(){
		if(this.rental._id){
			await client.updateRental(this.rental._id,this.rental);
		}else{
			this.props.onCreate(await client.createRental(this.rental));
		}
	}
	
	async delete(){
		await client.deleteRental(this.props.rental);
		history.back();
	}
script.
	var client = require("./client");
	var {Context,Binding} = require("react-bicon");
	var FormGroup = require("./formgroup");
	var Input = require("./input");
	var Number = require("./numberfield");
	var Date = require("./datefield");
	var Money = require("./moneyfield");
	var convert = require("../shared/dayConvert");
	var fixMonths = require("../shared/fixMonths");
	var moment = require("moment");
