.container
	h3 Service
	if this.service
		Context(target=this.service)
			.form-horizontal
				h4 Kunde
				Binding(name="tenantName")
					FormGroup(label="Name" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Input(type="text")
				Binding(name="tenantAddress")
					FormGroup(label="Adresse" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Input(type="textarea")
				Binding(name="tenantPhone")
					FormGroup(label="Telefon" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Input(type="text")
				Binding(name="tenantEmail")
					FormGroup(label="E-Mail" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Input(type="text")
				h4 Fahrzeug
				Binding(name="carBrand")
					FormGroup(label="Marke" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Input(type="text")
				Binding(name="carType")
					FormGroup(label="Typ" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Input(type="text")
				Binding(name="carColor")
					FormGroup(label="Farbe" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Input(type="text")
				Binding(name="carChassisNumber")
					FormGroup(label="Chassis-Nummer" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Input(type="text")
				Binding(name="carTypeCertificateNumber")
					FormGroup(label="Typenschein-Nummer" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Input(type="text")
				Binding(name="carLicencePlate")
					FormGroup(label="Nummernschild" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Input(type="text")
				
				h4 Dienstleistung
				Binding(name="date")
					FormGroup(label="Datum" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Date
				Binding(name="notes")
					FormGroup(label="Bemerkungen" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Input(type="textarea")
				.form-group
					label.control-label.col-sm-2 Leistungen					
					.col-sm-10
						table.table.table-striped
							tbody
								each item,i in this.service.services
									Context(name="services")
										Context(name=i)
											tr
												td
													Binding(name="description")
														Input(type="text")
												td(style="width:100px")
													Binding(name="count" onChange=this.recalculate.bind(this))
														Number
												td(style="width:100px")
													Binding(name="rate" onChange=this.recalculate.bind(this))
														Money
												td(style="width:100px")
													Binding(name="total")
														Money(disabled=true)
												td(style="width:50px")
													.btn.btn-default(onClick=this.removeItem.bind(this,item))
														.glyphicon.glyphicon-trash
								tr
									td(colSpan="3") Total
									td
										Binding(name="total")
											Money(disabled=true)
									td
										.btn.btn-primary(onClick=this.addItem.bind(this))
											.glyphicon.glyphicon-plus
				Binding(name="dueDate")
					FormGroup(label="Zahlbar bis" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Date
				Binding(name="paymentDate")
					FormGroup(label="Bezahlt am" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Date
				.btn-toolbar.pull-right
					if this.service._id
						.btn.btn-danger(onClick=this.delete.bind(this)) Löschen
					if this.documentExists
						.btn.btn-default(onClick=this.editDocx.bind(this)) DOCX bearbeiten
						.btn.btn-default(onClick=this.deleteDocx.bind(this)) DOCX löschen
					else
						.btn.btn-default(onClick=this.renderTemplate.bind(this)) Generieren
					.btn.btn-primary(onClick=this.save.bind(this)) Speichern
	if this.editing
		Editor(document=this.editing onClose=this.stopEditing.bind(this))
script(section="body").
	constructor(p,c){
		super(p,c);
		this.componentWillReceiveProps(p);
	}
	async componentWillReceiveProps(p){
		if(p.service == "new"){
			this.service = {
				tenantName:"",
				tenantAddress:"",
				tenantPhone:"",
				tenantEmail:"",

				carBrand:"",
				carType:"",
				carChassisNumber:"",
				carTypeCertificateNumber:"",
				carColor: "",
				carLicencePlate:"",

				date: null,
				services:[],
				notes:"",
				dueDate:null,
				paymentDate:null
			}
			this.documentExists = false;
		}else{
			this.service = await client.getService(p.service);		
			this.documentExists = await client.getDocumentExists("services."+this.service._id+".invoice");	
		}
		this.recalculate();
	}
	
	addItem(){
		this.service.services.push({
			description:"",
			count:1,
			rate:null,
			total:null
		});
		this.recalculate();
	}
	
	removeItem(item){
		this.service.services.splice(this.service.services.indexOf(item),1);
		this.recalculate();
	}
	
	recalculate(){
		calculateService(this.service);
		this.forceUpdate();
	}
	
	async save(){
		if(this.service._id){
			await client.updateService(this.service._id,this.service);
		}else{
			this.props.onCreate(await client.createService(this.service));
		}
	}
	
	async renderTemplate(){
		var service = this.service;
		var data = {
			receiver:service.tenantName+"\r\n"+service.tenantAddress.split("\n").join("\r\n"),
			date: moment().format("L"),
			totalBeforeTax:money.format(service.totalBeforeTax),
			taxAmount:money.format(service.taxAmount),
			total:money.format(service.total),
			services:service.services.map(s=>({
				name:s.description,
				count:money.format(Math.round(s.count*100)+""),
				rate:money.format(s.rate+""),
				total:money.format(s.total+"")
			}))
		};	

		var docx = await client.getDocument("service_invoice");
		console.log(docx);
		docx = await new Promise((s,e)=>{
			var reader = new FileReader();
			reader.onload = function(){
				s(reader.result);
			}
			reader.readAsArrayBuffer(docx);
		});
		
		console.log(docx)
		
		docx = new Zip(docx);
		console.log("done",docx)

		var template = new Template();
		template.load(docx);
		template.setData(data);
		template.render();
		console.log(template.getZip())
		docx = template.getZip().generate({type:"blob"});
		await client.uploadDocument("services."+this.service._id+".invoice",docx);
		this.documentExists = true;
		this.editDocx();
	}
	
	editDocx(){
		this.editing = "services."+this.service._id+".invoice";
		this.forceUpdate();
	}
	
	async deleteDocx(){
		await client.deleteDocument("services."+this.service._id+".invoice");
		this.documentExists = false;
		this.forceUpdate();
	}
	
	stopEditing(){
		delete this.editing;
		this.forceUpdate();
	}
	
	async delete(){
		await client.deleteService(this.props.service);
		history.back();
	}
script.
	var client = require("./client");
	var {Context,Binding} = require("react-bicon");
	var FormGroup = require("./formgroup");
	var Input = require("./input");
	var Number = require("./numberfield");
	var Date = require("./datefield");
	var Money = require("./moneyfield");
	var moment = require("moment");
	var money = require("../shared/money");
	var calculateService = require("../shared/calculateService");
	var Editor = require("./editor");
	var Template = require("../api/services/node_modules/docxtemplater");
	var money = require("../shared/money.js");
	var toBuffer = require("blob-to-buffer");
	var Zip = require("jszip");
